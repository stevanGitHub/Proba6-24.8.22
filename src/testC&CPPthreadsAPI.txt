//
// Created by os on 8/17/22.
//
#include "../h/workers.hpp"
#include "../lib/hw.h"
#include "../h/print.h"
#include "../h/tcb.hpp"
#include "../h/syscall_c.h"
#include "../h/syscall_cpp.hpp"


bool finishedA = false;
bool finishedB = false;
bool finishedC = false;
bool finishedD = false;


void workerBodyA(void *arg) {
    for (uint64 i = 0; i < 10; i++) {
        printString("A: i="); printInteger(i); printString("\n");
        for (uint64 j = 0; j < 10000; j++) {
            for (uint64 k = 0; k < 30000; k++) { /* busy wait */ }
            // TCB::yield();


            // novo
            thread_dispatch();

            //thread_exit();

        }
    }

    // novo
    printString("A finished!\n");
    finishedA = true;

}

void workerBodyB(void *arg) {
    for (uint64 i = 0; i < 16; i++) {
        printString("B: i="); printInteger(i); printString("\n");
        for (uint64 j = 0; j < 10000; j++) {
            for (uint64 k = 0; k < 30000; k++) { /* busy wait */ }

            // TCB::yield();

            // novo
            thread_dispatch();

            //thread_exit();

        }
    }

    // novo
    printString("B finished!\n");
    finishedB = true;
    thread_dispatch();

}

uint64 fibonacci(uint64 n) {
    if (n == 0 || n == 1) { return n; }
    if (n % 10 == 0) {
        // staro
        //TCB::yield();

        // novo
        thread_dispatch();
         }
        return fibonacci(n - 1) + fibonacci(n - 2);
}

void workerBodyC(void *arg) {
    uint8 i = 0;
    for (; i < 3; i++) {
        printString("C: i="); printInteger(i); printString("\n");
    }

    printString("C: yield\n");
    __asm__ ("li t1, 7");
    // staro
    //TCB::yield();

    // novo
     thread_dispatch();

    uint64 t1 = 0;
    __asm__ ("mv %[t1], t1" : [t1] "=r"(t1));

    printString("C: t1="); printInteger(t1); printString("\n");

    uint64 result = fibonacci(12);
    printString("C: fibonaci="); printInteger(result); printString("\n");

    for (; i < 6; i++) {
        printString("C: i="); printInteger(i); printString("\n");
    }
//    TCB::yield();

// novo
    printString("C finished!\n");
    finishedC = true;
    thread_dispatch();

}

void workerBodyD(void *arg) {
    uint8 i = 10;
    for (; i < 13; i++) {
        printString("D: i="); printInteger(i); printString("\n");
    }

    printString("D: yield\n");
    __asm__ ("li t1, 5");
    // staro
    //TCB::yield();

    // novo
     thread_dispatch();

    uint64 result = fibonacci(16);
    printString("D: fibonaci="); printInteger(result); printString("\n");

    for (; i < 16; i++) {
        printString("D: i="); printInteger(i); printString("\n");
    }

//    TCB::yield();

// novo
    printString("D finished!\n");
    finishedC = true;
    thread_dispatch();


}


void testThreadsC() {
    thread_t threads[4];
    thread_create(&threads[0], workerBodyA, nullptr);
    printString("ThreadA created\n");

    thread_create(&threads[1], workerBodyB, nullptr);
    printString("ThreadB created\n");

    thread_create(&threads[2], workerBodyC, nullptr);
    printString("ThreadC created\n");

    thread_create(&threads[3], workerBodyD, nullptr);
    printString("ThreadD created\n");

    while (!(finishedA && finishedB && finishedC && finishedD)) {
        thread_dispatch();
    }

}

void testThreadsCPP() {
    Thread* t1 = new Thread(workerBodyA, nullptr);
    Thread* t2 = new Thread(workerBodyB, nullptr);
    Thread* t3 = new Thread(workerBodyC, nullptr);
    Thread* t4 = new Thread(workerBodyD, nullptr);

    t1->start(); t2->start(); t3->start(); t4->start();

    while (!(finishedA && finishedB && finishedC && finishedD)) {
        Thread::dispatch();
    }
}